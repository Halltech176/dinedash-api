import response, { serviceResponseType } from '../utilities/response';
import { find, findOne } from '../utilities/query';
import { matched, validForm } from '../middlewares/validators';
import { Request, Response, NextFunction } from 'express';
import {{fcapitalize name}} from '../models/{{flowercase name}}.model';
import Permission from '../utilities/permission';
import User from '../models/userModel';
import permissionModel from '../models/permissionModel';

export default class {{fcapitalize name}}Service {
  /**
   * @description Get all {{flowercase name}}s
   * @param {object} queries
   * @returns {Promise<QueryReturn>}
   */

  static async fetch(
    queries: { [key: string]: any },
    conditions: {} | undefined = undefined,
  ): Promise<serviceResponseType> {
    try {
      if (conditions) {
        const data = await find({{fcapitalize name}}, queries, conditions);
        return {
          success: true,
          message: '{{fcapitalize name}}s fetched successfully',
          data,
        };
      }
      // return await find({{fcapitalize name}}, queries);
      const data = await find({{fcapitalize name}}, queries);
      return {
        success: true,
        message: '{{fcapitalize name}}s fetched successfully',
        data,
      };
    } catch (error) {
      return {
        success: false,
        message: 'Error fetching {{flowercase name}}s',
        data: error,
      };
    }
  }

  static async create(data: {}): Promise<serviceResponseType> {
    try {
      const created{{fcapitalize name}} = await {{fcapitalize name}}.create(data);
      return {
        success: true,
        message: '{{fcapitalize name}} created successfully',
        data: created{{fcapitalize name}},
      };
    } catch (error) {
      return {
        success: false,
        message: 'Error creating {{flowercase name}}',
        data: error,
      };
    }
  }

  static async updateOne(
    queries: { [key: string]: any },
    data: {},
  ): Promise<serviceResponseType> {
    try {
      const found{{fcapitalize name}} = await findOne({{fcapitalize name}}, queries);
      if (!found{{fcapitalize name}}) {
        throw new Error('{{fcapitalize name}} not found or access denied');
      }
      const updated{{fcapitalize name}} = await {{fcapitalize name}}.findByIdAndUpdate(found{{fcapitalize name}}._id, data, {
        new: true,
        runValidators: true,
      });
      return {
        success: true,
        message: '{{fcapitalize name}} updated successfully',
        data: updated{{fcapitalize name}},
      };
    } catch (error) {
      return {
        success: false,
        message: 'Error updating {{flowercase name}}',
        data: error,
      };
    }
  }

  static async deleteOne(queries: {
    [key: string]: any;
  }): Promise<serviceResponseType> {
    try {
      const found{{fcapitalize name}} = await findOne({{fcapitalize name}}, queries);
      if (!found{{fcapitalize name}}) {
        throw new Error('{{fcapitalize name}} not found or access denied');
      }
      const deleted{{fcapitalize name}} = await {{fcapitalize name}}.findByIdAndDelete(found{{fcapitalize name}}._id);
      return {
        success: true,
        message: '{{fcapitalize name}} deleted successfully',
        data: deleted{{fcapitalize name}},
      };
    } catch (error) {
      return {
        success: false,
        message: 'Error deleting {{flowercase name}}',
        data: error,
      };
    }
  }

}