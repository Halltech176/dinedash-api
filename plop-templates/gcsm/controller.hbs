import express, { query } from 'express';
import response from '../utilities/response';
import { QueryReturn, find, findOne } from '../utilities/query';
import { matched, validForm } from '../middlewares/validators';
import { Request, Response, NextFunction } from 'express';
import {{fcapitalize name}} from '../models/{{flowercase name}}.model';
import {
  authenticate,
  authenticateAdmin,
  authenticateUser,
  checkUserTypes,
} from '../middlewares/authentication';
import {{fcapitalize name}}Service from '../appservice/{{flowercase name}}.service';
import {
  canAssign{{fcapitalize name}},
  canCreate{{fcapitalize name}},
  canDelete{{fcapitalize name}},
} from '../guards/{{flowercase name}}.guard';
import { isPermitted } from '../guards';

const router = express.Router();

router.post(
  '/',
  checkUserTypes(['admin', 'super', 'employer', 'university']),
  async (req: Request, res: Response, next: NextFunction) => {
    const permitted = await canCreate{{fcapitalize name}}(req.user);
    if (!permitted?.auth) {
      return response(res, 401, permitted?.message);
    }
    const thebody = validForm({{fcapitalize name}}, req.body, false, {
      owner:
        req.user.type === 'university'
          ? req?.user?.colleges[0]
          : req.user.companies[0],
      ownedBy: req.user.type === 'university' ? 'college' : 'company',
    });
    const create{{fcapitalize name}} = await {{fcapitalize name}}Service.create({
      ...thebody,
      ...permitted.query,
      createdBy: req.user._id,
    });
    if (create{{fcapitalize name}}.success) {
      return response(res, 201, create{{fcapitalize name}}.message, create{{fcapitalize name}}.data);
    }
    next(create{{fcapitalize name}}.data);
  },
);

router.get(
  '/',
  authenticate,
  async (req: Request, res: Response, next: NextFunction) => {
    const permitted = await canCreate{{fcapitalize name}}(req.user);
    if (!permitted?.auth) {
      return response(res, 401, permitted?.message);
    }
    const get{{fcapitalize name}} = await {{fcapitalize name}}Service.fetch(req.query, {
      ...permitted.query,
    });
    if (get{{fcapitalize name}}.success) {
      return response(res, 200, get{{fcapitalize name}}.message, get{{fcapitalize name}}.data);
    }
    next(get{{fcapitalize name}}.data);
  },
);

router.put(
  '/:id',
  authenticate,
  async (req: Request, res: Response, next: NextFunction) => {
    const permitted = await canCreate{{fcapitalize name}}(req.user);
    if (!permitted?.auth) {
      return response(res, 401, permitted?.message);
    }
    const thebody = validForm({{fcapitalize name}}, req.body, false, {
      ...req.body,
    });
    const update{{fcapitalize name}} = await {{fcapitalize name}}Service.updateOne(
      {
        ...permitted.query,
        _id: req.params.id,
      },
      {
        ...thebody,
      },
    );
    if (update{{fcapitalize name}}.success) {
      return response(res, 200, update{{fcapitalize name}}.message, update{{fcapitalize name}}.data);
    }
    next(update{{fcapitalize name}}.data);
  },
);

router.delete(
  '/:id',
  authenticate,
  async (req: Request, res: Response, next: NextFunction) => {
    const permitted = await canDelete{{fcapitalize name}}(req.user);
    if (!permitted?.auth) {
      return response(res, 401, permitted?.message);
    }
    const delete{{fcapitalize name}} = await {{fcapitalize name}}Service.deleteOne(permitted.query);
    if (delete{{fcapitalize name}}.success) {
      return response(res, 200, delete{{fcapitalize name}}.message, delete{{fcapitalize name}}.data);
    }
    next(delete{{fcapitalize name}}.data);
  },
);

export default router;