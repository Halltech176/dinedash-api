import express, { Request, Response } from 'express';
import { canCreate{{fcapitalize name}}, canDelete{{fcapitalize name}}, canFetch{{fcapitalize name}}, canUpdate{{fcapitalize name}} } from './guard';
import {{fcapitalize name}}Service from './service';
import response, {
  throwIfError,
  throwPermIfError,
} from '../../utilities/response';
import _ from 'passport-local-mongoose';
const router = express.Router();
const {{fcapitalize name}}PathName = '/{{fcapitalize name}}';
/**
 * @openapi
 * 
 * /{{fcapitalize name}}:
 *   post:
 *     summary: Create a new {{fcapitalize name}}
 *     tags:
 *       - {{fcapitalize name}}s
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
 *     responses:
 *       201:
 *         description: {{fcapitalize name}} created successfully
//  *         content:
//  *           application/json:
 */
router.post('/', async (req: Request, res: Response) => {
  throwPermIfError(await canCreate{{fcapitalize name}}(req, true));
  const content = throwIfError(
    await {{fcapitalize name}}Service.create(req.body, { createdBy: req.user._id }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

/**
 * Fetches all {{fcapitalize name}}s
 *
 * @openapi
 *
 * /{{fcapitalize name}}:
 *   get:
 *     summary: Fetch all {{fcapitalize name}}s
 *     tags:
 *       - {{fcapitalize name}}s
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: {{fcapitalize name}}s fetched successfully
 */
router.get('/', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canFetch{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.fetch(req.query, {
      createdBy: req.user._id,
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

/**
 * Fetches a single {{fcapitalize name}} by ID
 *
 * @openapi
 *
 * /{{fcapitalize name}}/{id}:
 *   get:
 *     summary: Fetch a single {{fcapitalize name}} by ID
 *     tags:
 *       - {{fcapitalize name}}s
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: {{fcapitalize name}} fetched successfully
 */
router.get('/:id', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canFetch{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.fetchOne(req.query, {
      _id: req.params.id,
      createdBy: req.user._id,
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

/**
 * Updates a single {{fcapitalize name}} by ID
 * 
 * @openapi
 * 
 * /{{fcapitalize name}}/{id}:
 *   put:
 *     summary: Update a single {{fcapitalize name}} by ID
 *     tags:
 *       - {{fcapitalize name}}s
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
 *     responses:
 *       200:
 *         description: {{fcapitalize name}} updated successfully
 */
router.put('/:id', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canUpdate{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.updateOne({ _id: req.params.id, ...perm.query }, req.body),
  );
  return response(res, content.statusCode, content.message, content.data);
});

/**
 * Deletes a single {{fcapitalize name}} by ID
 * 
 * @openapi
 * 
 * /{{fcapitalize name}}/{id}:
 *   delete:
 *     summary: Delete a single {{fcapitalize name}} by ID
 *     tags:
 *       - {{fcapitalize name}}s
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: {{fcapitalize name}} deleted successfully
//  *         content:
//  *           application/json:
 */
router.delete('/:id', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canDelete{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.deleteOne(req.params.id, {
      createdBy: req.user._id,
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

export default router;
